buildscript {
	ext {
		protobufVersion = '4.28.2'
		protobufPluginVersion = '0.9.4'
		grpcVersion = '1.65.1'
	}
}


plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'

	id 'com.google.protobuf' version "${protobufPluginVersion}"

}


group = 'com.pedalgenie'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// 웹 관련 의존
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// oauth
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	// 검증 의존
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	// API 문서 의존
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	// 보안 의존
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// DB 의존
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.data:spring-data-redis'

	runtimeOnly 'com.mysql:mysql-connector-j'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


	// 테스트 검증
	testImplementation 'org.assertj:assertj-core:3.23.1'
	testImplementation 'com.h2database:h2'

	// QueryDSL 설정

	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta' // :jakarta 반드시 붙여야 Q 클래스가 컴파일 가능
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

	implementation "com.querydsl:querydsl-core"
	implementation "com.querydsl:querydsl-collections"

	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// S3 연결 관련
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	implementation 'software.amazon.awssdk:s3:2.20.121'
	implementation 'software.amazon.awssdk:url-connection-client:2.20.121'

	// sentry
	// 아래 두 라이브러리는 버전을 통일해서 사용하길 권장
	implementation 'io.sentry:sentry-spring-boot-starter-jakarta:7.20.0'
	implementation 'io.sentry:sentry-jdbc:7.20.0'

	// grpc 프로토콜 버터를 사용하기 위한 핵심 라이브러리 (Protobuf 메시지의 직렬화 및 역직렬화를 지원합니다.)
	implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
	implementation "com.google.protobuf:protobuf-java:${protobufVersion}"

	// grpc 서버, 클라이언트 설정
	implementation 'net.devh:grpc-spring-boot-starter:3.1.0.RELEASE' // Spring Boot와 gRPC의 통합을 간편하게 도와주는 스타터
	implementation "io.grpc:grpc-netty-shaded:${grpcVersion}" // Netty Shaded 사용(gRPC 서버와 클라이언트의 Netty 전송 계층을 제공)
	implementation "io.grpc:grpc-protobuf:${grpcVersion}"     // Protobuf 메시지와 gRPC의 통합을 지원
	implementation "io.grpc:grpc-stub:${grpcVersion}"         // gRPC 클라이언트 스텁을 생성
	compileOnly 'org.apache.tomcat:annotations-api:6.0.53'    // 이걸 추가해야 gRPC 컴파일시 javax 어노테이션 오류가 발생하지 않는다.

	// Grpc-Test-Support
	testImplementation "io.grpc:grpc-testing:${grpcVersion}"
}

protobuf {
	// Protobuf 컴파일러를 지정하여 .proto 파일을 컴파일합니다.
	protoc {
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
	}

	// gRPC 플러그인을 설정하여 Protobuf 파일로부터 gRPC 관련 코드를 생성합니다.
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}
	// 모든 프로토콜 버퍼 작업에 대해 gRPC 플러그인을 적용합니다.
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}


tasks.named('test') {
	useJUnitPlatform()
}



def generated = 'build/generated/querydsl'
def grpcGenerated = 'build/generated/source/proto/main/grpc'

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(generated)
}

jar {
	from('build/generated/source/proto/main/grpc') {
		include '**/*.class'
	}
}

sourceSets {
	main.java.srcDirs += [generated,grpcGenerated]
}

clean {
	delete file(generated)
	delete file(grpcGenerated)
}







